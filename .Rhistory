sub1 <- subset(ssd,subset == '1')
sub1 <- subset(ssd,subject == '1')
sub1 <- subset(ssd,subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit('showXY.R')
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)])
)
svd1$u
dim(svd1$u)
dim(svd1$v)
maxCon <- which.max(svd1$v[,2])
maxCon
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
max(svd1$v[,2])
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(560,561)],centers=6)
kClust <- kmeans(sub1[,-c(560,561)],centers=6)
lol
o
0
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29_
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab='Laying Cluster')
kClust
kClust$size
kClust$size==29
names(sub1[,1:3])
walkdown <- which(kCLust$size==49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19)
plot(kClust$centers[walkdown,1:12],pch=19,ylab='Walkdown Cluster')
swirl()
?as.character
?grid.arrange
??grid.arrange
grid.arrange()
?grid.arrange
??grid.arrange
t(c(1,2,3))
c(1,2,3)
?ggplotGrob
??ggplotGrob
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(knitr, dplyr, ggplot2, tidyr, hexbin, timeDate, grid, gridExtra, gtable)
destfile <- 'repdata%2Fdata%2FStormData.csv.bz2'
url <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
if (!file.exists(destfile))
download.file(url, destfile, method = "auto")
df <- read.csv(destfile)
foo <- list(a = 1, b = list(c = "a", d = FALSE))
bar <- modifyList(foo, list(e = 2, b = list(d = TRUE)))
str(foo)
str(bar)
library(swirl)
install_from_swirl('Statistical Inference')
swirl()
33/36
deck
52
4/52
(1/52)**4
(1/52)**3
(1/13)**3
(1/13)**4
(1/13)^4
(4/52)**4
(12/51)*(11/50)*(10/49)*(9/48)
info()
info()
0
12/52
2/51
swirl()
33/36
deck
52
4/52
0
12/52
2/51
1.6*0.5*0.8
0.64
mypdf
integrate(mypdf, lower=0, upper=1.6)
(0.5*4)**(0.5)
swirl()
swirl()
swirl()
0.64
0.64
mypdf
integrate(mypdf,lower=0,upper=1.6)
1.414
(0.5*4)**(0.5))
(0.5*4)**(0.5)
swirl()
0.997*0.985
0.997*0.001
0.001-0.00997
0.001-0.000997
(1-0.001)*(1-0.997)
(1-0.001)*(1-0.985)
0.000997/(0.000997+0.014985)
swirl()
0.001*0.997
(1-0.001)*(1-0.985)
0.000997/(0.000997+0.014985)
swirl()
0.001*0.997
(1-0.001)*(1-0.985)
0.000997/(0.000997+0.014985)
X/6
(1/6+2/6+3/6+4/6+5/6+6/6)
expect_div
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)*0.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
swirl()
dice_sqr
ex2_fair <- dice_sqr*dice_fair
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5**2
dice_sqr*dice_high - 3.5**2
sum(dice_sqr*dice_high) - edh**2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/(sqrt(120))
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4,1000),1,mean)))
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
swirl()
o
9
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,.8,FALSE)
qnorm(.1)
0
qnorm(0.975,)
qnorm(0.975,mean=3,sd=2)
1.96*2+3
pnorm(1200,1020,50,FALSE)
pnorm((1200-1020)/50)
pnorm((1200-1020)/50,lower.tail = FALSE)
qnorm(.75,1020,50,lower.tail = TRUE)
0.53
.53
ppois(3,2.5*4)
pbinom(5,1000,0.01)
ppois(5,1000*0.01)
swirl()
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(0.95)
0.6 +c(-1,1)*qnorm(0.975)*sqrt(0.6*(1-0.6)/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
swirl()
pnorm(-1)
qnorm(0.95)
1.645*75+1100
1.645*7.5+1100
binom.test
1-pbinom(3,size=5)
1-pbinom(3,size=5,prob=0.5)
ppois(10,15)
swirl()
myplot(2)
myplot(20)
myplot(2)
myplot2(2)
qt(0.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
g2-g1
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(mn)$conf.int
x
t.test(difference)$conf.int
sp <- (7*15.34^2+20*18.23^2)/sqrt(1/8+1/21)
sp <- (7*15.34^2+20*18.23^2)
ns <- 8+21-2
sp <- sqrt(sp/ns)
132.86 - 127.44 + c(-1,1)*qt(.95,ns)*(sp)
132.86 - 127.44 + c(-1,1)*qt(.95,ns)*(sp)*sqrt(1/8+1/21)
132.86 - 127.44 + c(-1,1)*qt(.975,ns)*(sp)*sqrt(1/8+1/21)
132.86 - 127.44 + c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(0.95,18)*sp*sqrt(1/9+1/9)
md + c(-1,1)*qt(0.975,18)*sp*sqrt(1/5)
t.test(g2-g1, paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1, paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1, paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1, paired=TRUE)$conf
s1 <- 15.34
n1 <- 8
s2 <- 18.23
n2 <- 21
num<-(s1^2/n1 + s2^2/n2)^2
den <- (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1)
mydf <- num/den
132.86 - 127.44 + c(-1,1)*qt(0.975,mydf)*(s1^2/n1+s2^2/n2)^(0.5)
132.86 - 127.44 + c(-1,1)*qt(0.975,mydf)*sqrt(s1^2/n1+s2^2/n2)
132.86 - 127.44 + c(-1,1)*qt(0.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
swirl()
swirl()
32/sqrt(10)
1
2
2/(10/sqrt(16))
15
qt(.95,15)
dim(fs)
t.test(fs$fheight,fs$sheight,paired = TRUE)
11.7885 *sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5,df=15,lower.tail = FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(0.95,lower.tail = FALSE)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail = FALSE)
swirl()
1100 + c(-1,1)*qt(0.975,8)*(30/sqrt(9))
2*3/(qt(0.975,8))
swirl()
myplot(34)
myplot(33.3
)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm((30+z,mean=30,lower.tail=FALSE))
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail = FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail = FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8,n=26,sd=1)
power.t.test(power=.8,n=26,sd=1,type="one.sample",alt="one.sided")$delta
power.t.test(power=.8,n=27,sd=1,type="one.sample",alt="one.sided")$delta
swirl()
swirl()
swirl()
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail = FALSE)
pnorm(30+z,mean=32,lower.tail = FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail = FALSE)
pnorm(30+z,mean=32,sd=2,lower.tail = FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta =100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt =
| "one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt =
one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt =
one.sided")$n
k
power.t.test(n = 16, delta =100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta =100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
l
l
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
[]
ok
no
power.t.test to find delta for a power=.8 and n=26 and sd=1
power.t.test(power=.8,n=26,sd=1,type="one.sample",alt="one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
swirl()
swirl()
head(pValues)
sum(pValues<0.05)
p.adjust(pValues,method='bonferoni')
p.adjust(pValues,method='bonferroni')
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStattus)
tail(trueStatus)
table(pvalues2<0.5,trueStatus)
table(pValues2<0.5,trueStatus)
table(pValues2<0.05,trueStatus)
24/100
24/1000
24/500
table(p.adjust(pValues,method="bonferroni")<0.05, trueStatus)
table(p.adjust(pValues,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
swirl()
swirl()
swirl()
(1/6)*1+(1/6)*2+(1/6)*3+(1/6)*4+(1/6)*5+(1/6)*6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sample(fh, nh*1000,TRUE)
sam <- sample(fh, nh*1000,TRUE)
sam <- sample(fh, nh*B,TRUE)
resam <- matrix(sam, B, nh)
apply(resam,1,median)
meds <- apply(resam,1,median)
median(fh)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)/10
sd(resampledMedians)
quantile(resampledMedians, c(0.025,0.975))
quantile(meds, c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
testStat(BCcounts, group)
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
obs
testStat(DEcounts,group)
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
a <- c(140,138,150,148,135)
b <- c(132,135,151,146,130)
diff <- a-b
diff
t.test()
t.test(diff)
?t.test
t.test(diff,paired=TRUE)
t.test(a,b,paired=TRUE)
1100 + c(-1,1)*qt(0.975)*30/3
1100 + c(-1,1)*qt(0.975,8)*30/3
?exact.test
??exact.test
load(stats)
install.packages('stats')
?fisher.test
?pbinom
pbinom(3,5,.5) - pbinom(2,5,.5)
?binom.test
?pois.test
??pois.test
poisson.test()
?poisson.test
poisson.test(10/1787,r=1/100,alternative = "greater")
poisson.test(10,T=1787,r=1/100,alternative = "greater")
10/1787
poisson.test(10,T=1787,r=1/100,alternative = "less")
?t.test
?power
?power.t.test
power.t.test(())
power.t.test(100,sd=0.04,type = c"one.sample",alternative="one.sided")
power.t.test(100,sd=0.04,type = "one.sample",alternative="one.sided")
power.t.test(100,delta=0.01,sd=0.04,type = "one.sample",alternative="one.sided")
power.t.test(delta=0.01,sd=0.04,power=0.9,type = "one.sample",alternative="one.sided")
?rmarkdown::render
rmarkdown::render(stat_inf.Rmd, output_format = 'all')
getwd()
setwd(/work/datasciencecoursera/stat_inf)
setwd('/work/datasciencecoursera/stat_inf'')
d
)
;
''
setwd('/work/datasciencecoursera/stat_inf')
setwd('~/work/datasciencecoursera/stat_inf')
rmarkdown::render(stat_inf.Rmd, output_format = 'all')
setwd('~/work/datasciencecoursera/stat_inf/')
rmarkdown::render(stat_inf.Rmd, output_format = 'all')
getwd()
rmarkdown::render('stat_inf.Rmd', output_format = 'all')
rexp(1,1)
rexp(2,1)
rexp(c(2,2),1)
rexp(c(2,1),1)
rexp(c(1,2),1)
rexp(c(1,2),1)
?rexp
?atrix
?matrix
?aply
?apply
rawdat <- rexp(40000, lambda = 0.2)
matdat <- matrix(rawdat, 1000, 40)
?rexp
rawdat <- rexp(40000, rate = 0.2)
matdat <- matrix(rawdat, 1000, 40)
means <- apply(matdat, 1, mean)
dim(means)
head(matdat)
means
dim(means)
size(means)
length(means)
mean(means)
1/0.2
rmarkdown::render("stat_inf.Rmd", output='all')
rmarkdown::render("stat_inf.Rmd", output_format='all')
(1/0.2)^2/40
head(means)
df_means <- data.frame('means'=means)
head(df_means)
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
means
dnorm(5,5,1/0.2/40)
dnorm(0)
dnorm(0.2)
dnorm(0.5)
dnorm(6,6)
?dnorm
dnorm(5,5,5/40)
5/40
40/5
40/50
sqrt(0.6)
1/0.25/40
(1/0.25)/40
(1/0.2)/40
th_sd
5/400
?kable
rmarkdown::render('stat_inf.Rmd', output_format = 'all')
?t.test
install.packages('htmltools')
install.packages('htmltools')
install.packages("htmltools")
library("htmltools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:htmltools", unload=TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
rmarkdown::render('stat_inf.Rmd',output_format = 'all')
rmarkdown::render('stat_inf.Rmd',output_format = 'pdf')
rmarkdown::render('stat_inf.Rmd',output_format = 'PDF')
rmarkdown::render('stat_inf.Rmd',output_format = 'pdf_document')
session_info()
session_Info()
sessionInfo()
